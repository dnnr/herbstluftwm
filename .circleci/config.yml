version: 2.1

executors:
    disco:
        docker:
            - image: dnnr/hlwm-ci:disco
    trusty:
        docker:
            - image: dnnr/hlwm-ci:trusty

commands:
    build:
        parameters:
            cc:
                type: string
            cxx:
                type: string
            build_type:
                type: string
            ninja_args:
                type: string
                default: ""
        steps:
            - restore_cache:
                name: "Restore ccache for << parameters.cc >>"
                keys:
                    - ccache-<< parameters.cxx >>-{{ .Branch }}-{{ .Revision }}
                    - ccache-<< parameters.cxx >>-{{ .Branch }}
                    - ccache-<< parameters.cxx >>-
            - run:
                when: always
                name: "Print ccache stats (before)"
                command: |
                    # Set reasonable ccache limits:
                    ccache --max-files=0 --max-size=500M
                    ccache -s
                    ccache -z
            - run:
                name: "Build with << parameters.cc >>"
                command: |
                    builddir=build-<< parameters.cc >>
                    [[ -d $builddir ]] || mkdir $builddir
                    cd $builddir
                    export CC=<< parameters.cc >>
                    export CXX=<< parameters.cxx >>
                    cmake -GNinja -DCMAKE_BUILD_TYPE=<< parameters.build_type >> -DENABLE_CCACHE=YES ..
                    ninja -v -k1 << parameters.ninja_args >> herbstclient herbstluftwm
            - run:
                when: always
                name: "Print ccache stats (after)"
                command: ccache -s
            - save_cache:
                name: "Save ccache for << parameters.cc >>"
                when: always
                key: ccache-<< parameters.cxx >>-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ~/.ccache
    test:
        parameters:
            builddir:
                type: string
        steps:
            - restore_cache:
                name: "Restore tox cache"
                keys:
                    - tox-{{ .Branch }}-{{ .Revision }}
                    - tox-{{ .Branch }}
                    - tox-
            - run:
                name: "Run tests"
                command: |
                    cd << parameters.builddir >>
                    ${RUN_TOX} && tox -e py37 -- -n auto -v -x --junitxml=test-results/tox/results.xml -k test_close
            - store_test_results:
                path: test-results
            - save_cache:
                name: "Save tox cache"
                when: on_success
                key: tox-{{ .Branch }}-{{ .Revision }}
                paths:
                    - .tox
    iwyu:
        steps:
            - run:
                name: "Run include-what-you-use"
                command: ./iwyu.sh

jobs:
    build-and-test-on-disco:
        executor: disco
        steps:
            - checkout
            - run:
                name: "Misc. preparations"
                command: |
                    # Delete .git/ to maximize ccache effectiveness (no version string mismatches)
                    rm -rf .git
            - build:
                cc: gcc-8
                cxx: g++-8
                build_type: "Debug"
                # GCC-8 consumes too much RAM for unlimited parallelism:
                ninja_args: -j2
            - build:
                cc: clang-7
                cxx: clang++-7
                build_type: "Debug"
            - test:
                builddir: build-clang-7
            - iwyu

    build-on-trusty:
        executor: trusty
        steps:
            - checkout
            - build:
                cc: gcc-4.8
                cxx: g++-4.8
                build_type: "Release"

workflows:
    version: 2
    ci_checks:
        jobs:
            - build-and-test-on-disco
            # - build-disco-clang-7
            # - build-disco-gcc-8
            - build-on-trusty
            # - iwyu
            # - test
            # - publish coverage
