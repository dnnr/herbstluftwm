language: minimal

cache:
    directories:
        - $HOME/.ccache-clang-7
        - $HOME/.ccache-gcc-4.8
        - $HOME/.ccache-gcc-8

jobs:
    include:
        - name: "Ubuntu 19.04, gcc-8/clang-7, Debug build, run checks and tests"
          dist: xenial
          services: docker
          script:
              # Prepare Docker image
              - docker pull dnnr/hlwm-ci:disco
              - docker build -t disco --cache-from dnnr/hlwm-ci:disco - <Dockerfile.ci-disco

              # Delete .git/ to maximize ccache effectiveness (no version string mismatches)
              - rm -rf .git

              # Build and test with gcc-8
              - docker run -u $UID --privileged -t --rm
                --volume=/etc/passwd:/etc/passwd:ro
                --volume=$HOME/.ccache-gcc-8:$HOME/.ccache:rw
                --volume=$PWD:/hlwm:rw
                disco
                /hlwm/ci-build.py --check-using-std --cxx=g++-8 --cc=gcc-8 --build-type=Release --ccache --run-tests

              # Build with clang-7
              - docker run -u $UID -t --rm
                --volume=$PWD:/hlwm:rw
                --volume=$HOME/.ccache-clang-7:/.ccache:rw
                disco
                /hlwm/ci-build.py --cxx=clang++-7 --cc=clang-7 --build-type=Release --ccache

        - name: "Ubuntu 14.04, gcc-4.8, Release build"
          dist: xenial
          services: docker
          script:
              # Prepare Docker image
              - docker pull dnnr/hlwm-ci:trusty
              - docker build -t trusty --cache-from dnnr/hlwm-ci:trusty - <Dockerfile.ci-trusty

              # Build with gcc-4.8 (plain bash one-liner)
              - docker run -u $UID -t --rm
                --volume=$PWD:/hlwm:rw
                --volume=$HOME/.ccache-gcc-4.8:$HOME/.ccache:rw
                trusty
                bash -c 'cd /tmp; cmake -GNinja /hlwm && ninja -v -k10'
